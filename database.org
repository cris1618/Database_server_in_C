#+TITLE: Database Server in C
#+AUTHOR: Cristian Del Gobbo (pledged)
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdbool.h> <fcntl.h> <stdarg.h> <stddef.h> <stdlib.h> <string.h> <arpa/inet.h> <unistd.h> <assert.h> <errno.h> <sys/socket.h> <netinet/in.h> :results output :noweb yes

* Introduction
Create an In-memory Database, which store temporary info and 
has a variety of applications.

The most used In-memory database is called =Redis=. The aim of the 
project is creating a very fast database, challenging the =redis= one, 
Focusing on CPU optimization.

* Implementing a Binary Tree
Define the structure of the three by creating Nodes, Leaves and the Tree.
#+name: bin_tree
#+begin_src C 
  #define TagRoot 1 /* 00 01 */
  #define TagNode 2 /* 00 10 */
  #define TagLeaf 4 /* 01 00 */

  #define NoError 0
  #define ExampleFile "./wl.txt"

  // Define a Null pointer
  typedef void* Nullptr;
  Nullptr nullptr = 0;

  // Macro for the function that find the last leaf (Only need to chage the Macro)
  #define find_last(x) find_last_linear(x)
  #define find_leaf(x,y) find_leaf_linear(x,y)
  #define lookup(x,y) lookup_linear(x,y)
  #define find_node(x) find_node_linear(x)
  #define reterr(x)\		
  errno = (x);\
  return nullptr; // return a null pointer

  #define Print(x)				\
    zero(buf, 256);				\
    strncpy((char *)buf, (char *)(x), 255);	\
    size = (int16)strlen((char *)buf);		\
    if(size)					\
      write(fd, (char *)buf, size)

  typedef unsigned int int32;
  typedef unsigned short int int16;
  typedef unsigned char int8;
  typedef unsigned char Tag;

  struct s_node{
    Tag tag; // Help keep track of the kind of structure
    struct s_node* north; // up link
    struct s_node* west; // left link
    struct s_leaf* east; // right link, only leaves
    int8 path[256]; // Contain the path
  };
  typedef struct s_node Node;

  struct s_leaf{
    Tag tag;
    union u_tree* west; // Connect to the left
    struct s_leaf* east;
    int8 key[128];
    int8* value; // Pointer to the value, allocate it separately
    int16 size; // size of the value
  };
  typedef struct s_leaf Leaf;

  union u_tree{ // All variable in the union share the same memory space
    Node n; // One Node or one Leaf, not both at the same time
    Leaf l;
  };
  typedef union u_tree Tree;

#+end_src

#+RESULTS: bin_tree

Define the tree root
#+name: tree_root
#+begin_src C
  <<bin_tree>>
    // Create the root of the tree
  Tree root = {
      .n = { // Node
        .tag = (TagRoot | TagNode),
        .north = (Node *)&root, // Point to itself
        .west = 0,
        .east = 0,
        .path = "/"
      }
    };
#+end_src

#+RESULTS: tree_root

Function to create and link nodes
#+name: create_node
#+begin_src C
  <<tree_root>>

    // Create zero function
  void zero(int8* str, int16 size){
    int8* p;
    int16 n;

    for(n=0, p=str; n < size; p++, n++)
      ,*p = 0;

    return;
    }

  // Function to create node
  Node* create_node(Node* parent, int8* path){
    Node* n;
    int16 size = sizeof(struct s_node);


    errno = NoError;
    assert(parent);
    n = (Node *)malloc((int)size);
    zero((int8 *)n, size);

    // Define the parent, pointing to this node
    parent -> west = n;

    // Initialize fields inside of n
    n->tag = TagNode;
    n->north = (Node *)parent; // Tree *
    strncpy((char *)n->path, (char *)path, 255);

    return n;
  }


  // Main function for testing purposes
  /*int main(){ 
    Node* n, *n2; 
    n = create_node((Node *)&root, (int8 *)"/Users");
    assert(n);
    n2 = create_node(n, (int8 *)"/Users/login");
    assert(n2);

    // Print addreses
    printf("Address of n: %p\n", &n);
    printf("Address of n2: %p\n", &n2);
    free(n2);
    free(n);
    return 0;
    }*/ 
#+end_src

#+RESULTS: create_node

Create a Leaf
#+name: create_leaf
#+begin_src C
  <<create_node>>

    // Function to find the last leaf
  Leaf* find_last_linear(Node* parent){ // Linear search for the moment
    Leaf* l;

    errno = NoError;
    assert(parent);

    if(!parent){
      fprintf(stderr, "Error: parent is NULL\n");
      return NULL;
    }

    if(!parent->east)
      return (Leaf *)0; // Return Error

    // Loop as long as l as an east "Brother"
    for(l = parent->east; l->east; l = l->east); // l will be the leaf on the last east position    
    assert(l);

    return l;
    }

  // Function to create a new leaf
  Leaf* create_leaf(Node* parent, int8* key, int8* value, int16 count){
    Leaf* l, *new;
    int16 size;


    assert(parent);
    l = find_last(parent); // last leaf
    size = sizeof(struct s_leaf);
    new = (Leaf *)malloc(size);
    assert(new);

    if(!l){ // Directly connected with the parent 
      parent->east = new;
    }
    else
      // l is a leaf
      l->east = new;

    // Initialize fields of the leaf
    zero((int8 *)new, size);
    new->tag = TagLeaf;
    new->west = (!l) ? (Tree *)parent : (Tree *)l;

    strncpy((char *)new->key, (char *)key, 127);
    new->value = (int8 *)malloc(count);
    zero(new->value, count);
    assert(new->value);
    strncpy((char *)new->value, (char *)value, count);
    new->size = count;

    return new;
  }

  // Test the creation of a leaf
  /*int main(){
    Node* n, *n2; 
    Leaf* l1, *l2;
    int8* key, *value;
    int16 size;

    n = create_node((Node *)&root, (int8 *)"/Users");
    assert(n);
    n2 = create_node(n, (int8 *)"/Users/login");
    assert(n2);

    key = (int8 *)"Cristian"; // Name of the user
    value = (int8 *)"abc77301";
    size = (int16)strlen((char *)value);
    l1 = create_leaf(n2, key, value, size);
    assert(l1);
    l2 = create_leaf(n, "Utente", "edf83938", size);
    assert(l2);
    // Print addreses of Nodes
    printf("Address of n: %p\n", &n);
    printf("Address of n2: %p\n", &n2);

    puts("");
    // Print values of Leaves
    printf("Value of l1: %s\n", l1->value);
    printf("Key of l1: %s\n", l1->key);
    puts("");
    printf("Value of l2: %s\n", l2->value);    
    printf("Key of l2: %s\n", l2->key);

    return 0;
    }*/
#+end_src

#+RESULTS: create_leaf

Create a pretty printer
#+name: pretty
#+begin_src C :tangle pretty.c
  <<create_leaf>>

    // Create helper functions
  int8* indent(int16 n){ // return string with 2*n spaces
    int16 i;
    static int8 buf[256];
    int8* p;

    if(n < 1)
      return (int8 *)"";
    assert(n < 120);
    zero(buf, 256);

    for(i=0, p=buf; i<n; i++, p+=2)
      strcpy((char *)p, "  ");

    return buf; 
    }

  // Pretty printer
  void print_tree(int fd, Tree* _root){
    int8 indentation;
    int8 buf[256];
    int16 size;
    Node* n;
    Leaf* l, *last;

    indentation = 0;
    for(n = (Node *)_root; n; n = n->west){
      Print(indent(indentation++));
      Print(n->path);
      Print("\n");
      if(n->east){
        last = find_last(n);
        if(last)
          for(l = last;(Node *)l->west != n; l = (Leaf *)l->west){
            Print(indent(indentation));
            Print(n->path);
            Print("/");
            Print(l->key);
            Print(" -> '");
            write(fd, (char *)l->value, (int)l->size);
            Print("'\n");
          } 
      }
    }
    return;
  }

#+end_src

#+RESULTS: pretty
: /
:   /Users
:     /Users/login

** Linear Search Alghorithm
#+name: lins
#+begin_src C :tangle lin_s.c
  <<pretty>>

  Node* find_node_linear(int* path){
    Node* p, *ret;
    for(ret=(Node*)0, p=(Node*)&root; p; p = p->west)
      if(!strcmp((char*)p->path, (char*)path)){
        ret = p;
        break;
      }
    return ret;
    }

  Leaf* find_leaf_linear(int8* path, int8* key){
    Node *n;
    Leaf *l, *ret;

    n = find_node(path);
    if(!n)
      return (Leaf *)0;

    for(ret=(Leaf *)0, l=n->east; l; l=l->east)
      if(!strcmp((char *)l->key, (char *)key)){
        ret = l;
        break;
      }
    return ret;
  }

  int8* lookup_linear(int8* path, int8* key){
    Leaf *p;

    p = find_leaf_linear(path, key);

    return (p) ? p->value : (int8*)0;
  }

  // Print the tree
  Tree* example_tree(){
    int8* c; // Keep track of subfolders
    Node* n, *p;
    int8  path[256];
    int32 x;

    zero(path, 256);
    x = 0;

    for(n = (Node *)&root, c='a'; c<='z'; c++){
      x = (int32)strlen((char *)path);
      ,*(path + x++) = '/';
      ,*(path + x) = c;

      p = n;
      n = create_node(p, path);
    }
    return (Tree *)&root;
  }

  // Helper function to create a path
  int8* example_path(int8 path){
    int32 x;
    static int8 buf[256];
    int8 c;

    zero(buf, 256);
    for(c='a'; c<=path; c++){
      x = (int32)strlen((char *)buf);
      ,*(buf + x++) = '/';
      ,*(buf + x) = c;
    }
    return buf;
  }

  int8* example_duplicate(int8* str){
    int16 n, x;
    static int8 buf[256];

    zero(buf, 256);
    strncpy((char*)buf, (char*)str, 255);
    n = (int16)strlen((char *)buf);
    x = (n*2);
    if(x > 254)
      return buf;
    else
      strncpy((char *)buf+n, strdup((char *)buf), 255);

    return buf;
  }

  // Create example leaf
  int32 example_leaves(){
    // int fd;
    FILE *fd;
    int32 x, y;
    int8 buf[256];
    int8* path, *val;
    Node* n;

    //fd = open(ExampleFile, O_RDONLY);
    fd = fopen(ExampleFile, "r");
    assert(fd);

    zero(buf, 256);
    y = 0;

    //while((x=read(fd, buf, 255) > 0)){
    while(fgets((char *)buf, 255, fd)){
      x = (int32)strlen((char *)buf);
      ,*(buf + x-1) = 0;
      path = example_path(*buf);
      n = find_node(path);
      if(!n){
        zero(buf, 256);
        continue;
      }
      val = example_duplicate(buf);
      create_leaf(n, buf, val, (int16)strlen((char *)val));
      y++;
      zero(buf, 256);
    }

    fclose(fd);
    return y;
  }

  // Main function for testing purposes
  /*int main(){
    Tree* example;
    int32 x;
    int8* p;

    example = example_tree();
    printf("Populating tree... ");
    fflush(stdout);
    x = example_leaves();
    p=lookup((int8 *)"/a", (int8 *)"aardwolf");
    // Printing the tree
    // print_tree(1, example);


    return 0;
    }*/
#+end_src

**  Create an Hash Table
First of all, we need to define the structure of the Hash
#+name: hash_struct
#+begin_src C 
  <<lins>>
  #define hash(x, y) hash_naive(x, y)
    // Define hash structure
  struct s_hash{
    unsigned int hash:21; // give size of 21
  };
  typedef struct s_hash Hash;
#+end_src

#+RESULTS: hash_struct

Create the Hash algorithm
#+name: hash_alg
#+begin_src C :tangle hash.c
  <<hash_struct>>
    // Hash naive function
    // Turn the input (string) into a 21 bit int 
  Hash hash_naive(int8* input, int16 size){
    Hash hash;
    int16 x;
    int8* p;

    hash.hash = 0;
    for(p=input, x=0; x<size; p++, x++)
      hash.hash += *p;

    return hash;
    }

  int main(int argc, char* argv[]){
    int8* str;
    int16 size;
    Hash h;

    if(argc < 2){
      fprintf(stderr, "Usage: %s string\n", *argv);
      return -1;
    }

    str = (int8 *)argv[1];
    size = (int16)strlen((char *)str);

    h = hash(str, size);

    printf("0x%.05x\n", (unsigned int)h.hash);
    return 0;
  }
#+end_src

#+RESULTS: hash_alg

* Creating the in-memory Database
After we saw how to create a binary tree, It's time to start
creating the core database server itself. =Cache22=

Start by creating the basis of the network communication
So that we can login to our server.
#+name: net_com
#+begin_src C :tangle net.c
  #define _GNU_SOURCE

  // Definitions
  #define HOST "127.0.0.1"
  #define PORT "12049" //Unique for this protocol

  // Define custom integers
  typedef unsigned int int32;
  typedef unsigned short int int16;
  typedef unsigned char int8;



  // structure to handle the client access
  struct s_client{
    int s; 
    // IP address
    char ip[16];
    int16 port;
  };
  typedef struct s_client Client;


  // Definition of a function
  typedef int32 (*Callback)(Client*, int8*, int8*); // One for each arguments (folder, args)

  struct s_cmdhandler{
    int8* cmd;
    Callback handler;
  };
  typedef struct s_cmdhandler CmdHandler;

  int32 handle_hello(Client *cli, int8* folder, int8* args){
    dprintf(cli->s, "hello '%s'\n", folder);
    return 0;
  }

  CmdHandler handlers[] = {
    {(int8*)"Hello", handle_hello}
  };

  Callback getcmd(int8* cmd){
    Callback cb; 
    int16 n, arrlen;

    if(sizeof(handlers) < 16)
      return 0;
    arrlen = sizeof(handlers) / 16;

    cb = 0;
    for(n=0; n<arrlen; n++)
      if(!strcmp((char *)cmd, (char *)handlers[n].cmd)){
        cb = handlers[n].handler;
        break;
      }
    

    return cb;
  }

  // server continuation
  bool scontinuation; 
  // Child continuation
  bool ccontinuation;

  void zero(int8* buf, int16 size){
    int8* p;
    int16 n;

    for(n=0, p=buf; n<size; n++, p++)
      ,*p = 0;
  }

  void childloop(Client* cli){
    int8 buf[256];
    int16 n;
    int8* p, *f;
    int8 cmd[256], folder[256], args[256]; // Create the command, the folder and the argument

    zero(buf, 256);
    read(cli->s,(char *)buf, 255);
    n = (int16)strlen((char *)buf);
    if(n>254)
      n=254;

    // Examples of commands:
    // select /Users/bob
    // create /Users/logins
    // insert /Users/bob values

    for(p=buf; 
        (*p)
          && (n--)
          && (*p != ' ')
          && (*p != '\n')
          && (*p != '\r')
          ;p++);

    zero(cmd, 256); 
    zero(folder, 256);
    zero(args, 256);

    if(!(*p) || (!n)){
      strncpy((char *)cmd, (char *)buf, 255);
      goto done; // If it points at the end, jump to done
    } 


    else if((*p == '\n') || (*p == '\r')){
      ,*p = 0;
      strncpy((char *)cmd, (char *)buf, 255);
      goto done;
    }

    else if((*p == ' ')){
      ,*p = 0;
      strncpy((char *)cmd, (char *)buf, 255);
    }

    // Second iteration 
    for(p++, f=p; 
        (*p)
          && (n--)
          && (*p != ' ')
          && (*p != '\n')
          && (*p != '\r')
          ;p++);


    if(!(*p) || (!n)){
      strncpy((char *)folder, (char *)f, 255);
      goto done; 
    } else if((*p == ' ') || (*p == '\n') || (*p == '\r')){
      ,*p = 0;
      strncpy((char *)folder, (char *)f, 255);
    }
    p++; // jump the space
    if(*p){
      strncpy((char *)args, (char *)p, 255);
      for(p=args; ((*p) && (*p != '\n') && (*p != '\r')); p++);
      ,*p = 0;
    }
   done:
    dprintf(cli->s, "\ncmd:\t%s\n", cmd);
    dprintf(cli->s, "folder:\t%s\n", folder);
    dprintf(cli->s, "args:\t%s\n", args);

    return;
  }

  void mainloop(int s) {
    struct sockaddr_in cli; // Client
    int32 len;
    int s2; // sock for the client
    char *ip;
    int16 port;
    Client* client;
    pid_t pid;
    int8 cmd[256], folder[256], args[256];


    s2 = accept(s, (struct sockaddr *)&cli, (unsigned int *)&len);
    if(s2<0)
      return;

    port = (int16)htons((int)cli.sin_port);
    ip = inet_ntoa(cli.sin_addr);

    printf("Connection from %s: %d\n", ip, port);

    client = (Client *)malloc(sizeof(struct s_client));
    assert(client);

    zero((int8 *)client, sizeof(struct s_client));
    client->s = s2;
    client->port = port;
    strncpy(client->ip, ip, 15); 

    // Fork, program continue in two indipendent parts
    pid = fork();
    if(pid){ // Inside of the parent
      free(client);
      return;
    }else{ // Inside of the child
      dprintf(s2, "100 Connected to Cache22 server\n");      
      ccontinuation = true;
      while(ccontinuation)
        childloop(client);
      close(s2);
      free(client);

      return;
    }

    return;    
  }


  int initserver(int16 port){
    struct sockaddr_in sock;
    int s;

    sock.sin_family = AF_INET;
    sock.sin_port = htons((int)port); // htons 
    sock.sin_addr.s_addr = inet_addr(HOST); 

    s = socket(AF_INET, SOCK_STREAM, 0);
    assert(s > 0);

    errno = 0;
    if (bind(s, (struct sockaddr *)&sock, sizeof(sock))) // Bind a name to a socket
      {
        fprintf(stderr, "Error: %s (Failed to bind on %s:%d, Errno: %d)\n", 
                strerror(errno), HOST, port, errno);
        exit(EXIT_FAILURE);
      }

    errno = 0;
    if(listen(s, 20)) // Accept connections
      {
        fprintf(stderr, "Error: %s\n", strerror(errno));
        exit(EXIT_FAILURE);
      }

    printf("Server listening on %s: %d\n", HOST, port);

    return s;
  }

  int main(int argc, char* argv[]){
    char* sport;
    int16 port;
    int s;

    Callback x;

    x = getcmd((int8*)"Hello");
    printf("%p\n", x);

    return 0;
    if (argc < 2)
      sport = PORT;
    else
      sport = argv[1];

    port = (int16)atoi(sport);


    s = initserver(port);
    scontinuation = true;

    // Run the program while scontinuation is true
    while(scontinuation)
      mainloop(s);

    printf("Server stopped.\n");
    close(s); // Clean up the socket when done


    return 0;
  }

#+end_src

#+RESULTS: net_com
: 0x55642c2d4409

