#+TITLE: Database Server in C
#+AUTHOR: Cristian Del Gobbo (pledged)
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdbool.h> <stdarg.h> <stddef.h> <stdlib.h> <string.h> <arpa/inet.h> <unistd.h> <assert.h> <errno.h> <sys/socket.h> <netinet/in.h> :results output :noweb yes

* Introduction
Create an In-memory Database, which store temporary info and 
has a variety of applications.

The most used In-memory database is called =Redis=. The aim of the 
project is creating a very fast database, challenging the =redis= one, 
Focusing on CPU optimization.

* Implementing a Binary Tree
Define the structure of the three by creating Nodes, Leaves and the Tree
#+name: bin_tree
#+begin_src C 
  #define TagRoot 1 /* 00 01 */
  #define TagNode 2 /* 00 10 */
  #define TagLeaf 4 /* 01 00 */

  #define NoError 0

  // Define a Null pointer
  typedef void* Nullptr;
  Nullptr nullptr = 0;

  // Macro for the function that find the last leaf (Only need to chage the Macro)
  #define find_last(x) find_last_linear(x)
  #define reterr(x) \		
    errno = (x); \
    return nullptr; // return a null pointer

  typedef unsigned int int32;
  typedef unsigned short int int16;
  typedef unsigned char int8;
  typedef unsigned char Tag;

  struct s_node{
    Tag tag; // Help keep track of the kind of structure
    struct s_node* north; // up link
    struct s_node* west; // left link
    struct s_leaf* east; // right link, only leaves
    int8 path[256]; // Contain the path
  };
  typedef struct s_node Node;

  struct s_leaf{
    Tag tag;
    union u_tree* west; // Connect to the left
    struct s_leaf* east;
    int8 key[128];
    int8* value; // Pointer to the value, allocate it separately
    int16 size; // size of the value
  };
  typedef struct s_leaf Leaf;

  union u_tree{ // All variable in the union share the same memory space
    Node n; // One Node or one Leaf, not both at the same time
    Leaf l;
  };
  typedef union u_tree Tree;

#+end_src

#+RESULTS: bin_tree

Define the tree root
#+name: tree_root
#+begin_src C
  <<bin_tree>>
    // Create the root of the tree
  Tree root = {
      .n = { // Node
        .tag = (TagRoot | TagNode),
        .north = (Node *)&root, // Point to itself
        .west = 0,
        .east = 0,
        .path = "/"
      }
    };
#+end_src

#+RESULTS: tree_root

Function to create and link nodes
#+name: create_node
#+begin_src C
  <<tree_root>>

    // Create zero function
  void zero(int8* str, int16 size){
    int8* p;
    int16 n;

    for(n=0, p=str; n < size; p++, n++)
      ,*p = 0;

    return;
    }

  // Function to create node
  Node* create_node(Node* parent, int8* path){
    Node* n;
    int16 size;


    errno = NoError;
    assert(parent);
    n = (Node *)malloc((int)size);
    zero((int8 *)n, size);

    // Define the parent, pointing to this node
    parent -> west = n;

    // Initialize fields inside of n
    n->tag = TagNode;
    n->north = (Tree *)parent;
    strncpy((char *)n->path, (char *)path, 255);

    return n;
  }


  // Main function for testing purposes
  /*int main(){ 
    Node* n, *n2; 
    n = create_node((Node *)&root, (int8 *)"/Users");
    assert(n);
    n2 = create_node(n, (int8 *)"/Users/login");
    assert(n2);

    // Print addreses
    printf("Address of n: %p\n", &n);
    printf("Address of n2: %p\n", &n2);
    free(n2);
    free(n);
    return 0;
    }*/ 
#+end_src

#+RESULTS: create_node

Create a Leaf
#+name: create_leaf
#+begin_src C
  <<create_node>>

    // Function to find the last leaf
  Leaf* find_last_linear(Node* parent){ // Linear search for the moment
    Leaf* l;

    errno = NoError;
    assert(parent);

    if(!parent->east)
      reterr(NoError); // Return Error

    // Loop as long as l as an east "Brother"
    for(l = parent->east; l->east; l = l->east); // l will be the leaf on the last east position    
    assert(l);
    return l;
    }

  // Function to create a new leaf
  Leaf* create_leaf(Node* parent, int8* key, int8* value, int16 count){
    Leaf* l, *new;
    int16 size;


    assert(parent);
    l = find_last(parent); // last leaf
    size = sizeof(struct s_leaf);
    new = (Leaf *)malloc(size);
    assert(new);

    if(!l){ // Directly connected with the parent 
      parent->east = new;
    }
    else
      // l is a leaf
      l->east = new;

    // Initialize fields of the leaf
    zero((int8 *)new, size);
    new->tag = TagLeaf;
    new->west = (!l) ? (Tree *)parent : (Tree *)l;

    strncpy((char *)new->key, (char *)key, 127);
    new->value = (int8 *)malloc(count);
    zero(new->value, count);
    assert(new->value);
    strncpy((char *)new->value, (char *)value, count);
    new->size = count;

    return new;
  }

  // Test the creation of a leaf
  /*int main(){
    Node* n, *n2; 
    Leaf* l1, *l2;
    int8* key, *value;
    int16 size;

    n = create_node((Node *)&root, (int8 *)"/Users");
    assert(n);
    n2 = create_node(n, (int8 *)"/Users/login");
    assert(n2);

    key = (int8 *)"Cristian"; // Name of the user
    value = (int8 *)"abc77301";
    size = (int16)strlen((char *)value);
    l1 = create_leaf(n2, key, value, size);
    assert(l1);
    l2 = create_leaf(n, "Utente", "edf83938", size);
    assert(l2);
    // Print addreses of Nodes
    printf("Address of n: %p\n", &n);
    printf("Address of n2: %p\n", &n2);

    puts("");
    // Print values of Leaves
    printf("Value of l1: %s\n", l1->value);
    printf("Key of l1: %s\n", l1->key);
    puts("");
    printf("Value of l2: %s\n", l2->value);    
    printf("Key of l2: %s\n", l2->key);

    return 0;
  }*/
#+end_src

#+RESULTS: create_leaf
: Address of n: 0x7ffecf0e2a98
: Address of n2: 0x7ffecf0e2aa0
: 
: Value of l1: abc77301
: Key of l1: Cristian
: 
: Value of l2: edf83938
: Key of l2: Utente

* Creating the in-memory Database
After we saw how to create a binary tree, It's time to start
creating the core database server itself. =Cache22=

Start by creating the basis of the network communication
So that we can login to our server.
#+name: net_com
#+begin_src C :tangle net.c
  #define _GNU_SOURCE

  // Definitions
  #define HOST "127.0.0.1"
  #define PORT "12049" //Unique for this protocol

  // Define custom integers
  typedef unsigned int int32;
  typedef unsigned short int int16;
  typedef unsigned char int8;

  // structure to handle the client access
  struct s_client{
    int s; 
    // IP address
    char ip[16];
    int16 port;
  };
  typedef struct s_client Client;

  // server continuation
  bool scontinuation; 
  // Child continuation
  bool ccontinuation;

  void zero(int8* buf, int16 size){
    int8* p;
    int16 n;

    for(n=0, p=buf; n<size; n++, p++)
      ,*p = 0;
  }

  void childloop(Client* cli){
    int8 buf[256];
    int16 n;
    int8* p, *f;
    int8 cmd[256], folder[256], args[256]; // Create the command, the folder and the argument

    zero(buf, 256);
    read(cli->s,(char *)buf, 255);
    n = (int16)strlen((char *)buf);
    if(n>254)
      n=254;

    // Examples of commands:
    // select /Users/bob
    // create /Users/logins
    // insert /Users/bob values

    for(p=buf; 
        (*p)
          && (n--)
          && (*p != ' ')
          && (*p != '\n')
          && (*p != '\r')
          ;p++);

    zero(cmd, 256); 
    zero(folder, 256);
    zero(args, 256);

    if(!(*p) || (!n)){
      strncpy((char *)cmd, (char *)buf, 255);
      goto done; // If it points at the end, jump to done
    } else if((*p == ' ') || (*p == '\n') || (*p == '\r')){
      ,*p = 0;
      strncpy((char *)cmd, (char *)buf, 255);
    }

    // Second iteration 
    for(p++, f=p; 
        (*p)
          && (n--)
          && (*p != ' ')
          && (*p != '\n')
          && (*p != '\r')
          ;p++);


    if(!(*p) || (!n)){
      strncpy((char *)folder, (char *)f, 255);
      goto done; 
    } else if((*p == ' ') || (*p == '\n') || (*p == '\r')){
      ,*p = 0;
      strncpy((char *)folder, (char *)f, 255);
    }
    p++; // jump the space
    if(*p){
      strncpy((char *)args, (char *)p, 255);
      for(p=args; ((*p) && (*p != '\n') && (*p != '\r')); p++);
      ,*p = 0;
    }
   done:
    dprintf(cli->s, "\ncmd:\t%s\n", cmd);
    dprintf(cli->s, "folder:\t%s\n", folder);
    dprintf(cli->s, "args:\t%s\n", args);

    return;
  }

  void mainloop(int s) {
    struct sockaddr_in cli; // Client
    int32 len;
    int s2; // sock for the client
    char *ip;
    int16 port;
    Client* client;
    pid_t pid;
    int8 cmd[256], folder[256], args[256];


    s2 = accept(s, (struct sockaddr *)&cli, (unsigned int *)&len);
    if(s2<0)
      return;

    port = (int16)htons((int)cli.sin_port);
    ip = inet_ntoa(cli.sin_addr);

    printf("Connection from %s: %d\n", ip, port);

    client = (Client *)malloc(sizeof(struct s_client));
    assert(client);

    zero((int8 *)client, sizeof(struct s_client));
    client->s = s2;
    client->port = port;
    strncpy(client->ip, ip, 15); 

    // Fork, program continue in two indipendent parts
    pid = fork();
    if(pid){ // Inside of the parent
      free(client);
      return;
    }else{ // Inside of the child
      dprintf(s2, "100 Connected to Cache22 server\n");      
      ccontinuation = true;
      while(ccontinuation)
        childloop(client);
      close(s2);
      free(client);

      return;
    }

    return;    
  }


  int initserver(int16 port){
    struct sockaddr_in sock;
    int s;

    sock.sin_family = AF_INET;
    sock.sin_port = htons((int)port); // htons 
    sock.sin_addr.s_addr = inet_addr(HOST); 

    s = socket(AF_INET, SOCK_STREAM, 0);
    assert(s > 0);

    errno = 0;
    if (bind(s, (struct sockaddr *)&sock, sizeof(sock))) // Bind a name to a socket
      {
        fprintf(stderr, "Error: %s (Failed to bind on %s:%d, Errno: %d)\n", 
                strerror(errno), HOST, port, errno);
        exit(EXIT_FAILURE);
      }

    errno = 0;
    if(listen(s, 20)) // Accept connections
      {
        fprintf(stderr, "Error: %s\n", strerror(errno));
        exit(EXIT_FAILURE);
      }

    printf("Server listening on %s: %d\n", HOST, port);

    return s;
  }

  int main(int argc, char* argv[]){
    char* sport;
    int16 port;
    int s;


    if (argc < 2)
      sport = PORT;
    else
      sport = argv[1];

    port = (int16)atoi(sport);


    s = initserver(port);
    scontinuation = true;

    // Run the program while scontinuation is true
    while(scontinuation)
      mainloop(s);

    printf("Server stopped.\n");
    close(s); // Clean up the socket when done


    return 0;
  }

#+end_src

#+RESULTS: net_com
